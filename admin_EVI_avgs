/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var senegalStates = ee.FeatureCollection("users/nguy3856/senegalAdminLevel1"),
    senegalCounties = ee.FeatureCollection("users/nguy3856/senegalAdminLevel2"),
    senegalCountry = ee.FeatureCollection("users/nguy3856/senegalAdminLevel0"),
    senegalTownships = ee.FeatureCollection("users/nguy3856/senegalAdminLevel3"),
    sAdminL4 = ee.FeatureCollection("users/nguy3856/senegalAdminLevel4");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/**
 * TODO:
 * add date filtering
 * double check gDrive export works
 * add a table export/embed panel that has EVI data for all admin levels
*/

// A UI to interactively filter Landsat 8 EVI in Senegal, 
// select a date range, admin level, and export it.

// The namespace for our application.  All the state is kept in here.
var app = {};

/** Creates the UI panels. */
app.createPanels = function() {
  /* The introduction section. */
  app.intro = {
    panel: ui.Panel([
      ui.Label({
        value: 'EVI of Senegal Explorer',
        style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
      }),
      ui.Label('This app allows you to filter and export images & EVI averages' +
               ' over different admin levels from the Landsat 8 dataset.')
    ])
  };

  /* admin level picker section. */
  app.picker = {
    // Create a select with a function that reacts to the "change" event.
    select: ui.Select({
      // placeholder: 'Select an admin level',
      items: Object.keys(app.ADMIN_LEVELS),
      onChange: app.refreshMapLayer
    }),
    // Create a button that centers the map on a given object.
    centerButton: ui.Button('Center on map', function() {
      Map.setCenter(-14.73,14.57, 6);
    })
  };

  /* admin Level picker controls */
  app.picker.panel = ui.Panel({
    widgets: [
      ui.Label('1) Select an admin level', {fontWeight: 'bold'}),
      ui.Panel([
        app.picker.select,
        app.picker.centerButton
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });

  /* The export section. */
  app.export = {
    button: ui.Button({
      label: 'Export the current image to Drive',
      // React to the button's click event.
      onClick: function() {
        // Select the full image id.
        var imageIdTrailer = app.picker.select.getValue();
        // Get the visualization options.
        var visOption = app.VIS_OPTIONS[app.vis.select.getValue()];
        // Export the image to Drive.
        Export.image.toDrive({
          image: ee.Image(imageId).select(visOption.visParams.bands),
          description: 'L8_Export-' + imageIdTrailer,
        });
      }
    })
  };

  /* export section controls */
  app.export.panel = ui.Panel({
    widgets: [
      ui.Label('2) Start an export', {fontWeight: 'bold'}),
      app.export.button
    ],
    style: app.SECTION_STYLE
  });
};

/** Creates the app helper functions. */
app.createHelpers = function() {
  /**
  * Enables or disables loading mode.
  * @param {boolean} enabled Whether loading mode is enabled.
  */
  app.setLoadingMode = function(enabled) {
    console.log("loading");
    // Set the loading label visibility to the enabled mode.
    // Set each of the widgets to the given enabled mode.
    var loadDependentWidgets = [
      app.picker.select,
      app.picker.centerButton,
      app.export.button
    ];
    loadDependentWidgets.forEach(function(widget) {
      widget.setDisabled(enabled);
    });
  };

  /** Applies the selection filters currently selected in the UI. */
  app.applyFilters = function() {
    app.picker.select.setValue(app.picker.select.items().get(0));
    app.refreshMapLayer();
    // app.setLoadingMode(true);
  //   var filtered = ee.ImageCollection(app.COLLECTION_ID);

  //   // Filter bounds to the map if the checkbox is marked.
  //   if (app.filters.mapCenter.getValue()) {
  //     filtered = filtered.filterBounds(Map.getCenter());
  //   }

  //   // Set filter variables.
  //   var start = app.filters.startDate.getValue();
  //   if (start) start = ee.Date(start);
  //   var end = app.filters.endDate.getValue();
  //   if (end) end = ee.Date(end);
  //   if (start) filtered = filtered.filterDate(start, end);

  //   // Get the list of computed ids.
  //   var computedIds = filtered
  //       .limit(app.IMAGE_COUNT_LIMIT)
  //       .reduceColumns(ee.Reducer.toList(), ['system:index'])
  //       .get('list');

  //   computedIds.evaluate(function(ids) {
  //     // Update the image picker with the given list of ids.
  //     app.setLoadingMode(false);
  //     app.picker.select.items().reset(ids);
  //     // Default the image picker to the first id.
  //     app.picker.select.setValue(app.picker.select.items().get(0));
  //   });
  };

  /** Refreshes the current map layer based on the UI widget states. */
  app.refreshMapLayer = function() {
    Map.clear();
    var adminLevel = app.picker.select.getValue();
    if (adminLevel) {
      var evi = app.L8.mean().expression(
        '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
        {
          'NIR': app.L8.select('SR_B5'),
          'RED': app.L8.select('SR_B4'),
          'BLUE': app.L8.select('SR_B2')
        }
      ).rename('evi');
      Map.addLayer(evi, {}, 'EVI'); // evi band colors are unknown rn
      Map.addLayer(app.ADMIN_LEVELS[adminLevel].style(app.polyVis));
    }
  };
};

/** Creates the app constants. */
app.createConstants = function() {
  var states = ee.FeatureCollection(senegalStates);
  var counties = ee.FeatureCollection(senegalCounties);
  var senegal = ee.FeatureCollection(senegalCountry);
  var townships = ee.FeatureCollection(senegalTownships);
  var level4 = ee.FeatureCollection(sAdminL4);
  app.ADMIN_LEVELS = {
    Country: senegal,
    States: states,
    Counties: counties,
    Townships: townships,
    'Administrative Level 4': level4
  };
  app.polyVis = {
    color: '0000ff',
    width: 1,    
    fillColor: '00000000'
  };
  //TODO: refactor so mean() is being calculated for each admin level in helper fxn
  app.L8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
             .filterBounds(senegal.geometry())
             .filterMetadata("CLOUD_COVER", "less_than", 1);
  app.SECTION_STYLE = {margin: '20px 0 0 0'};
  app.HELPER_TEXT_STYLE = {
      margin: '8px 0 -3px 8px',
      fontSize: '12px',
      color: 'gray'
  };
  app.IMAGE_COUNT_LIMIT = 10;
};

/** Creates the application interface. */
app.boot = function() {
  app.createConstants();
  app.createHelpers();
  app.createPanels();
  var main = ui.Panel({
    widgets: [
      app.intro.panel,
      app.picker.panel,
      app.export.panel
    ],
    style: {width: '320px', padding: '8px'}
  });
  Map.setCenter(-14.73,14.57, 6);
  ui.root.insert(0, main);
  app.applyFilters();
};

app.boot();
