/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var senegalStates = ee.FeatureCollection("users/nguy3856/senegalAdminLevel1"),
    senegalCounties = ee.FeatureCollection("users/nguy3856/senegalAdminLevel2"),
    senegalCountry = ee.FeatureCollection("users/nguy3856/senegalAdminLevel0"),
    senegalTownships = ee.FeatureCollection("users/nguy3856/senegalAdminLevel3"),
    sAdminL4 = ee.FeatureCollection("users/nguy3856/senegalAdminLevel4");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/**
 * TODO:
 * figure out how to get averages of a single state
 * add date filtering
 * double check gDrive export works
 * add a table export/embed panel that has EVI data for all admin levels
 * separate adminLevel loading from EVI loading
*/

/**
 * MINOR BUGS
 * applying date filter resets admin level, if no start date provided
 * removing start date from text box does not remove start date
*/

// A UI to interactively filter Landsat 8 EVI in Senegal, 
// select a date range, admin level, and export it.

// The namespace for our application.  All the state is kept in here.
var app = {};

/** Creates the UI panels. */
app.createPanels = function() {
  /* The introduction section. */
  app.intro = {
    panel: ui.Panel([
      ui.Label({
        value: 'EVI of Senegal Explorer',
        style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
      }),
      ui.Label('This app allows you to filter and export images & EVI averages' +
               ' over different admin levels from the Landsat 8 dataset.')
    ])
  };
  
  /* The collection filter controls. */
  app.filters = {
    startDate: ui.Textbox('YYYY-MM-DD'),
    endDate: ui.Textbox('YYYY-MM-DD'),
    applyButton: ui.Button('Apply Date Filter', app.updateFilters),
    loadingLabel: ui.Label({
      value: 'Loading...',
      style: {stretch: 'vertical', color: 'gray', shown: false}
    })
  };

  /* The panel for the filter control widgets. */
  app.filters.panel = ui.Panel({
    widgets: [
      ui.Label('2) Select Date Range', {fontWeight: 'bold'}),
      ui.Label('Start date', app.HELPER_TEXT_STYLE), app.filters.startDate,
      ui.Label('End date', app.HELPER_TEXT_STYLE), app.filters.endDate,
      ui.Panel([
        app.filters.applyButton,
        app.filters.loadingLabel
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });

  /* admin level picker section. */
  app.picker = {
    // Create a select with a function that reacts to the "change" event.
    select: ui.Select({
      // placeholder: 'Select an admin level',
      items: Object.keys(app.ADMIN_LEVELS),
      onChange: app.refreshMapLayer
    }),
    // Create a button that centers the map on a given object.
    centerButton: ui.Button('Center on map', function() {
      Map.setCenter(-14.73,14.57, 6);
    })
  };

  /* admin Level picker controls */
  app.picker.panel = ui.Panel({
    widgets: [
      ui.Label('1) Select an admin level', {fontWeight: 'bold'}),
      ui.Panel([
        app.picker.select,
        app.picker.centerButton
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });

  /* The export section. */
  app.export = {
    button: ui.Button({
      label: 'Export the current image to Drive',
      // React to the button's click event.
      onClick: function() {
        // // Select the full image id.
        // var adminLevel = app.picker.select.getValue();
        // // Export the image to Drive.
        // Export.image.toDrive({
        //   image: app.tempEVI.visualize({}),
        //   description: 'L8_Export-' + adminLevel,
        // });
        console.log('sho sicko mode');
      }
    })
  };

  /* export section controls */
  app.export.panel = ui.Panel({
    widgets: [
      ui.Label('3) Start an export', {fontWeight: 'bold'}),
      app.export.button
    ],
    style: app.SECTION_STYLE
  });
};

/** Creates the app helper functions. */
app.createHelpers = function() {
  /**
  * Enables or disables loading mode.
  * @param {boolean} enabled Whether loading mode is enabled.
  */
  app.setLoadingMode = function(enabled) {
    console.log("loading");
    // Set the loading label visibility to the enabled mode.
    // Set each of the widgets to the given enabled mode.
    var loadDependentWidgets = [
      app.picker.select,
      app.export.button
    ];
    loadDependentWidgets.forEach(function(widget) {
      widget.setDisabled(enabled);
    });
  };

  /** Applies the selection filters currently selected in the UI. */
  app.updateFilters = function() {
    // Set filter variables. & update EVI accordingly
    var start = app.filters.startDate.getValue();
    if (start) start = ee.Date(start);
    var end = app.filters.endDate.getValue();
    if (end) end = ee.Date(end);
    if (start) { //BUG: potential bug where date removed after running once
      app.DATE_RANGE = {start: start,
                        end: end};
    } else { // will run on startup only
      app.picker.select.setValue(app.picker.select.items().get(0)); // default top admin level
    }
    app.refreshMapLayer();
  };
  
  app.loopThruShapefile = function() {
    var adminLevel = app.ADMIN_LEVELS[app.picker.select.getValue()];
    var adminNum = adminLevel[1];
    var adminFC = adminLevel[0]; // FC = FeatureCollection
    
    // based on adminLevel, dissolve into list by that NAME_ and do the math for ALL degraded indicators.
    //FYI: does not work w/ country, needs special case
    if (adminNum !== 0) {
      adminFC.aggregate_array('NAME_'+adminNum).evaluate(function (names) {
        names.map(function (name) {
          var section = adminFC
            .filter(ee.Filter.equals('NAME_'+adminNum, name))
            .first();
          app.findTrendInEVI(section.geometry(), name);
          // CALL OTHER DEGRADED LAND INDICATORS HERE
        })
      })
    } else {
      app.findTrendInEVI(adminFC.geometry(), "Senegal");
      // CALL OTHER DEGRADED LAND INDICATORS HERE
    }
  }
  
  app.findTrendInEVI = function(sectionGeom, sectionName) { //TODO: use sectionName for table entry
    var EVI = app.L8.filterBounds(sectionGeom);
      if (app.DATE_RANGE.start) {
        EVI = EVI.filterDate(app.DATE_RANGE.start, app.DATE_RANGE.end);
      }
      var avgEVI = EVI.mean(); //TODO: CHANGE TO TREND IN ???
      // if dateFilter -> filter by date, then get mean()
      var evi = avgEVI.expression(
        '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))',
        {
          'NIR': avgEVI.select('SR_B5'),
          'RED': avgEVI.select('SR_B4'),
          'BLUE': avgEVI.select('SR_B2')
        }
      ).rename('evi')
      .clip(sectionGeom);
      Map.addLayer(evi, {}, sectionName, true, 0.8); // evi band colors are unknown rn
  }

  /** Refreshes the current map layer based on the UI widget states. */
  app.refreshMapLayer = function() {
    Map.clear();
    var adminLevel = app.picker.select.getValue();
    if (adminLevel) {
      app.loopThruShapefile();
      Map.addLayer(app.ADMIN_LEVELS[adminLevel][0].style(app.polyVis), {}, "Admin Level Borders"); //TODO: make top layer everytime
    }
  };
};

/** Creates the app constants. */
app.createConstants = function() {
  var states = ee.FeatureCollection(senegalStates);
  var counties = ee.FeatureCollection(senegalCounties);
  var senegal = ee.FeatureCollection(senegalCountry);
  var townships = ee.FeatureCollection(senegalTownships);
  var level4 = ee.FeatureCollection(sAdminL4);
  app.ADMIN_LEVELS = {
    Country: [senegal, 0],
    States: [states, 1],
    Counties: [counties, 2],
    Townships: [townships, 3],
    'Administrative Level 4': [level4, 4]
  };
  app.polyVis = {
    color: '0000ff',
    width: 1,    
    fillColor: '00000000'
  };
  app.DATE_RANGE = {};
  app.L8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
             .filterBounds(senegal.geometry())
             .filterMetadata("CLOUD_COVER", "less_than", 1);
  app.SECTION_STYLE = {margin: '20px 0 0 0'};
  app.HELPER_TEXT_STYLE = {
      margin: '8px 0 -3px 8px',
      fontSize: '12px',
      color: 'gray'
  };
};

/** Creates the application interface. */
app.boot = function() {
  app.createConstants();
  app.createHelpers();
  app.createPanels();
  var main = ui.Panel({
    widgets: [
      app.intro.panel,
      app.picker.panel,
      app.filters.panel,
      // app.data.panel, // charts and tables here
      app.export.panel
    ],
    style: {width: '320px', padding: '8px'}
  });
  Map.setCenter(-14.73,14.57, 6);
  ui.root.insert(0, main);
  app.updateFilters();
};

app.boot();
