/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var senegalStates = ee.FeatureCollection("users/nguy3856/senegalAdminLevel1"),
    senegalCounties = ee.FeatureCollection("users/nguy3856/senegalAdminLevel2"),
    senegalCountry = ee.FeatureCollection("users/nguy3856/senegalAdminLevel0"),
    senegalTownships = ee.FeatureCollection("users/nguy3856/senegalAdminLevel3"),
    sAdminL4 = ee.FeatureCollection("users/nguy3856/senegalAdminLevel4");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/**
 * TODO:
 * double check gDrive export works
 * add a table export/embed panel that has EVI data for all admin levels
 * separate adminLevel loading from EVI loading
 * add section selection functionality on click, localizing data to that section
 * add a return button to go back to big picture view
*/

/**
 * MINOR BUGS
 * applying date filter resets admin level, if no start date provided
 * removing start date from text box does not remove start date
 * admin border not visible on top
*/

// A UI to interactively filter Landsat 8 EVI in Senegal, 
// select a date range, admin level, and export it.

// The namespace for our application.  All the state is kept in here.
var app = {};

/** Creates the UI panels. */
app.createPanels = function() {
  /* The introduction section. */
  app.intro = {
    panel: ui.Panel([
      ui.Label({
        value: 'EVI of Senegal Explorer',
        style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
      }),
      ui.Label('This app allows you to filter and export images & EVI averages' +
               ' over different admin levels from the Landsat 8 dataset.')
    ])
  };
  
  /* Indicator selection controls */
  app.indicators = {
    indicatorSelection: ui.Select({
      items: Object.keys(app.INDICATORS)
    }),
    applyButton: ui.Button('Apply Indicator(s)', app.refreshMapLayer),
  };
  
  /* Indicator selection panel */
  app.indicators.panel = ui.Panel({
    widgets: [
      ui.Label('2) Select degraded land indicators', {fontWeight: 'bold'}),
      ui.Panel([
        app.indicators.select,
        app.picker.applyButton
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });
  
  /* The collection filter controls. */
  app.filters = {
    startDate: ui.Textbox('YYYY-MM-DD'),
    endDate: ui.Textbox('YYYY-MM-DD'),
    applyButton: ui.Button('Apply Date Filter', app.updateFilters),
    loadingLabel: ui.Label({
      value: 'Loading...',
      style: {stretch: 'vertical', color: 'gray', shown: false}
    })
  };

  /* The panel for the filter control widgets. */
  app.filters.panel = ui.Panel({
    widgets: [
      ui.Label('3) Select Date Range (if applicable to indicator)', {fontWeight: 'bold'}),
      ui.Label('Start date', app.HELPER_TEXT_STYLE), app.filters.startDate,
      ui.Label('End date', app.HELPER_TEXT_STYLE), app.filters.endDate,
      ui.Panel([
        app.filters.applyButton,
        app.filters.loadingLabel
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });

  /* admin level picker section. */
  app.picker = {
    // Create a select with a function that reacts to the "change" event.
    select: ui.Select({
      // placeholder: 'Select an admin level',
      items: Object.keys(app.ADMIN_LEVELS),
      onChange: app.refreshMapLayer
    }),
    // Create a button that centers the map on a given object.
    centerButton: ui.Button('Center on map', function() {
      Map.setCenter(-14.73,14.57, 6);
    })
  };

  /* admin Level picker controls */
  app.picker.panel = ui.Panel({
    widgets: [
      ui.Label('1) Select an admin level', {fontWeight: 'bold'}),
      ui.Panel([
        app.picker.select,
        app.picker.centerButton
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });

  /* The data table section. */
  app.data = {
    trendInEVIChart: ui.Chart.image.series(app.tempNDVI, //PLACE HOLDER CHART
      app.ADMIN_LEVELS['Country'][0].geometry(), 
      ee.Reducer.mean(),
      200)
      .setOptions({
        title: 'EVI Trend Over Time',
        vAxis: {title: 'EVI'},
        lineWidth: 1,
        pointSize: 3,
      })
  };

  /* data table section controls */
  app.data.panel = ui.Panel({
    widgets: [
      ui.Label('4) Degraded Land Indicators', {fontWeight: 'bold'}),
      app.data.trendInEVIChart,
      //ADD OTHER CHARTS HERE
    ],
    style: app.SECTION_STYLE
  });
  
  /* The export section. */
  app.export = {
    button: ui.Button({
      label: 'Export the current image to Drive',
      // React to the button's click event.
      onClick: function() {
        // // Select the full image id.
        // var adminLevel = app.picker.select.getValue();
        // // Export the image to Drive.
        // Export.image.toDrive({
        //   image: app.tempEVI.visualize({}),
        //   description: 'L8_Export-' + adminLevel,
        // });
        console.log('sho sicko mode');
      }
    })
  };

  /* export section controls */
  app.export.panel = ui.Panel({
    widgets: [
      ui.Label('5) Start an export', {fontWeight: 'bold'}),
      app.export.button
    ],
    style: app.SECTION_STYLE
  });
  
};

/** Creates the app helper functions. */
app.createHelpers = function() {
  /**
  * Enables or disables loading mode.
  * @param {boolean} enabled Whether loading mode is enabled.
  */
  app.setLoadingMode = function(enabled) {
    console.log("loading");
    // Set the loading label visibility to the enabled mode.
    // Set each of the widgets to the given enabled mode.
    var loadDependentWidgets = [
      app.picker.select,
      app.export.button
    ];
    loadDependentWidgets.forEach(function(widget) {
      widget.setDisabled(enabled);
    });
  };

  /** Applies the selection filters currently selected in the UI. */
  app.updateFilters = function() {
    // Set filter variables. & update EVI accordingly
    var start = app.filters.startDate.getValue();
    if (start) start = ee.Date(start);
    var end = app.filters.endDate.getValue();
    if (end) end = ee.Date(end);
    if (start) { //BUG: potential bug where date removed after running once
      app.DATE_RANGE = {start: start,
                        end: end};
    } else { // will run on startup only
      app.picker.select.setValue(app.picker.select.items().get(0)); // default top admin level
    }
    app.refreshMapLayer();
  };
  
  app.loopThruShapefile = function() {
    var adminLevel = app.ADMIN_LEVELS[app.picker.select.getValue()];
    var adminNum = adminLevel[1];
    var adminFC = adminLevel[0]; // FC = FeatureCollection
    
    // based on adminLevel, dissolve into list by that NAME_ and do the math for ALL degraded indicators.
    //FYI: does not work easily w/ country, needs special case
    if (adminNum !== 0) {
      adminFC.aggregate_array('NAME_'+adminNum).evaluate(function (names) {
        names.map(function (name) {
          var section = adminFC
            .filter(ee.Filter.equals('NAME_'+adminNum, name))
            .first();
          // WILL NEED TO REFACTOR WHEN MULTIPLE INDICATORS SUPPORTED
          var indicatorSelected = app.INDICATORS[app.indicators.indicatorSelection.getValue()];
          if (indicatorSelected == maxTrend) {
            app.findTrendInEVI(section.geometry(), name);
          }
          // CALL OTHER DEGRADED LAND INDICATORS HERE
        })
      })
    } else {
      var indicatorSelected = app.INDICATORS[app.indicators.indicatorSelection.getValue()];
      if (indicatorSelected == maxTrend) {
        app.findTrendInEVI(section.geometry(), "Senegal");
      }
      // CALL OTHER DEGRADED LAND INDICATORS HERE
    }
  }
  
  app.findTrendInEVI = function(sectionGeom, sectionName) {
    var EVI = app.L8.filterBounds(sectionGeom);
    // if (app.DATE_RANGE.start) {
    //   EVI = EVI.filterDate(app.DATE_RANGE.start, app.DATE_RANGE.end);
    // }

    var createTimeBand = function(image) {
      return image.addBands(image.metadata('DATE_PRODUCT_GENERATED').divide(1e10));
    };
    
    // need an array to hold all the images
    var yearlyMaxes = [];
    
    // loop thru all the years we wanna look at
    for (var year = 2013; year < 2021; year++) { 
      var startDate = year + "-01-01"
      var endDate = year + "-12-31"
      
      // preprocessing the landsat images & adding timestamps
      var pp_L8 = EVI
      .filterBounds(sectionGeom)
      .filterDate(startDate, endDate)
      .filterMetadata("CLOUD_COVER", "less_than", 1)
      .map(createTimeBand)
      .max() 
      .clip(sectionGeom);
      
      // EVI calculated via the USGS definition of EVI equation
      var yearEvi = pp_L8.expression('2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
      'NIR': pp_L8.select('SR_B5'),
      'RED': pp_L8.select('SR_B4'),
      'BLUE': pp_L8.select('SR_B2')
      })
      .rename('evi')
      .addBands(pp_L8.select('DATE_PRODUCT_GENERATED')); // making sure the timestamp carries over
      
      // add the new image to the list
      yearlyMaxes.push(yearEvi);
    }
    
    // convert the list into an actual IC
    var timedEviMaxes = ee.ImageCollection(yearlyMaxes);
    
    // reduce the ImageCollection w/ linear fit w/ time as x-axis and EVI as y-axis
    var linearFit = timedEviMaxes.select(['DATE_PRODUCT_GENERATED', 'evi']).reduce(ee.Reducer.linearFit());
    var worst25 = linearFit.reduce(ee.Reducer.percentile([25]));
    // Map.addLayer(linearFit, {min: [0, -15, 0], max: [-0.15, 50, 0.15], bands: ['scale', 'offset', 'scale']}, sectionName);
    Map.addLayer(worst25, {bands:'p25', min:-1, max:1}, sectionName);
  }

  /** Refreshes the current map layer based on the UI widget states. */
  app.refreshMapLayer = function() {
    Map.clear();
    var adminLevel = app.picker.select.getValue();
    if (adminLevel) {
      app.loopThruShapefile();
      Map.addLayer(app.ADMIN_LEVELS[adminLevel][0].style(app.polyVis), {}, "Admin Level Borders"); //TODO: make top layer everytime
    }
  };
};

/** Creates the app constants. */
app.createConstants = function() {
  app.tempNDVI = ee.ImageCollection('NOAA/VIIRS/001/VNP13A1')
    .filterDate('2021-01-01', '2022-01-01').select('NDVI');
  
  var states = ee.FeatureCollection(senegalStates);
  var counties = ee.FeatureCollection(senegalCounties);
  var senegal = ee.FeatureCollection(senegalCountry);
  var townships = ee.FeatureCollection(senegalTownships);
  var level4 = ee.FeatureCollection(sAdminL4);
  app.ADMIN_LEVELS = {
    Country: [senegal, 0],
    States: [states, 1],
    Counties: [counties, 2],
    Townships: [townships, 3],
    'Administrative Level 4': [level4, 4]
  };
  app.INDICATORS = {
    'Bottom quartile of yearly EVI maxes (linear trend)': maxTrend, 
    'Trend in length of season': seasonLength,
    'Trend in start of season': seasonStart,
  }
  app.polyVis = {
    color: '0000ff',
    width: 1,    
    fillColor: '00000000'
  };
  app.DATE_RANGE = {};
  app.L8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
             .filterBounds(senegal.geometry())
             .filterMetadata("CLOUD_COVER", "less_than", 1);
  app.SECTION_STYLE = {margin: '20px 0 0 0'};
  app.HELPER_TEXT_STYLE = {
      margin: '8px 0 -3px 8px',
      fontSize: '12px',
      color: 'gray'
  };
};

/** Creates the application interface. */
app.boot = function() {
  app.createConstants();
  app.createHelpers();
  app.createPanels();
  var main = ui.Panel({
    widgets: [
      app.intro.panel,
      app.picker.panel,
      app.indicators.panel,
      app.filters.panel,
      app.data.panel, // charts and tables here
      app.export.panel
    ],
    style: {width: '320px', padding: '8px'}
  });
  Map.setCenter(-14.73,14.57, 6);
  ui.root.insert(0, main); // potential issue with resetting charts at a specific position
  app.updateFilters();
};

app.boot();
