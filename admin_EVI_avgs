/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var senegalStates = ee.FeatureCollection("users/nguy3856/senegalAdminLevel1"),
    senegalCounties = ee.FeatureCollection("users/nguy3856/senegalAdminLevel2"),
    senegalCountry = ee.FeatureCollection("users/nguy3856/senegalAdminLevel0");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// A UI to interactively filter a collection, select an individual image
// from the results, display it with a variety of visualizations, and export it.

// The namespace for our application.  All the state is kept in here.
var app = {};

/** Creates the UI panels. */
app.createPanels = function() {
  /* The introduction section. */
  app.intro = {
    panel: ui.Panel([
      ui.Label({
        value: 'EVI of Senegal Explorer',
        style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
      }),
      ui.Label('This app allows you to filter and export images & EVI averages' +
               ' over different admin levels from the Landsat 8 dataset.')
    ])
  };

  /* The collection filter controls. */
  // app.filters = {
  //   mapCenter: ui.Checkbox({label: 'Filter to map center', value: true}),
  //   startDate: ui.Textbox('YYYY-MM-DD', '2017-05-01'),
  //   endDate: ui.Textbox('YYYY-MM-DD', '2017-09-01'),
  //   applyButton: ui.Button('Apply filters', app.applyFilters),
  //   loadingLabel: ui.Label({
  //     value: 'Loading...',
  //     style: {stretch: 'vertical', color: 'gray', shown: false}
  //   })
  // };

  // /* The panel for the filter control widgets. */
  // app.filters.panel = ui.Panel({
  //   widgets: [
  //     ui.Label('1) Select filters', {fontWeight: 'bold'}),
  //     ui.Label('Start date', app.HELPER_TEXT_STYLE), app.filters.startDate,
  //     ui.Label('End date', app.HELPER_TEXT_STYLE), app.filters.endDate,
  //     app.filters.mapCenter,
  //     ui.Panel([
  //       app.filters.applyButton,
  //       app.filters.loadingLabel
  //     ], ui.Panel.Layout.flow('horizontal'))
  //   ],
  //   style: app.SECTION_STYLE
  // });

  /* admin level picker section. */
  app.picker = {
    // Create a select with a function that reacts to the "change" event.
    select: ui.Select({
      placeholder: 'Select an admin level',
      items: Object.keys(app.ADMIN_LEVELS),
      onChange: app.refreshMapLayer
    }),
    // Create a button that centers the map on a given object.
    centerButton: ui.Button('Center on map', function() {
      Map.centerObject(Map.layers().get(0).get('eeObject'));
    })
  };

  /* admin Level picker controls */
  app.picker.panel = ui.Panel({
    widgets: [
      ui.Label('1) Select an admin level', {fontWeight: 'bold'}),
      ui.Panel([
        app.picker.select,
        app.picker.centerButton
      ], ui.Panel.Layout.flow('horizontal'))
    ],
    style: app.SECTION_STYLE
  });

  /* The visualization section. */
  // app.vis = {
  //   label: ui.Label(),
  //   // Create a select with a function that reacts to the "change" event.
  //   select: ui.Select({
  //     items: Object.keys(app.VIS_OPTIONS),
  //     onChange: function() {
  //       // Update the label's value with the select's description.
  //       var option = app.VIS_OPTIONS[app.vis.select.getValue()];
  //       app.vis.label.setValue(option.description);
  //       // Refresh the map layer.
  //       app.refreshMapLayer();
  //     }
  //   })
  // };

  // /* The panel for the visualization section with corresponding widgets. */
  // app.vis.panel = ui.Panel({
  //   widgets: [
  //     ui.Label('3) Select a visualization', {fontWeight: 'bold'}),
  //     app.vis.select,
  //     app.vis.label
  //   ],
  //   style: app.SECTION_STYLE
  // });

  // // Default the select to the first value.
  // app.vis.select.setValue(app.vis.select.items().get(0));

  /* The export section. */
  app.export = {
    button: ui.Button({
      label: 'Export the current image to Drive',
      // React to the button's click event.
      onClick: function() {
      //   // Select the full image id.
      //   var imageIdTrailer = app.picker.select.getValue();
      //   var imageId = app.COLLECTION_ID + '/' + imageIdTrailer;
      //   // Get the visualization options.
      //   var visOption = app.VIS_OPTIONS[app.vis.select.getValue()];
      //   // Export the image to Drive.
      //   Export.image.toDrive({
      //     image: ee.Image(imageId).select(visOption.visParams.bands),
      //     description: 'L8_Export-' + imageIdTrailer,
      //   });
      console.log("sicko mode");
      }
    })
  };

  /* export section controls */
  app.export.panel = ui.Panel({
    widgets: [
      ui.Label('2) Start an export', {fontWeight: 'bold'}),
      app.export.button
    ],
    style: app.SECTION_STYLE
  });
};

/** Creates the app helper functions. */
app.createHelpers = function() {
  // /**
  // * Enables or disables loading mode.
  // * @param {boolean} enabled Whether loading mode is enabled.
  // */
  // app.setLoadingMode = function(enabled) {
  //   // Set the loading label visibility to the enabled mode.
  //   app.filters.loadingLabel.style().set('shown', enabled);
  //   // Set each of the widgets to the given enabled mode.
  //   var loadDependentWidgets = [
  //     app.vis.select,
  //     app.filters.startDate,
  //     app.filters.endDate,
  //     app.filters.applyButton,
  //     app.filters.mapCenter,
  //     app.picker.select,
  //     app.picker.centerButton,
  //     app.export.button
  //   ];
  //   loadDependentWidgets.forEach(function(widget) {
  //     widget.setDisabled(enabled);
  //   });
  // };

  // /** Applies the selection filters currently selected in the UI. */
  // app.applyFilters = function() {
  //   app.setLoadingMode(true);
  //   var filtered = ee.ImageCollection(app.COLLECTION_ID);

  //   // Filter bounds to the map if the checkbox is marked.
  //   if (app.filters.mapCenter.getValue()) {
  //     filtered = filtered.filterBounds(Map.getCenter());
  //   }

  //   // Set filter variables.
  //   var start = app.filters.startDate.getValue();
  //   if (start) start = ee.Date(start);
  //   var end = app.filters.endDate.getValue();
  //   if (end) end = ee.Date(end);
  //   if (start) filtered = filtered.filterDate(start, end);

  //   // Get the list of computed ids.
  //   var computedIds = filtered
  //       .limit(app.IMAGE_COUNT_LIMIT)
  //       .reduceColumns(ee.Reducer.toList(), ['system:index'])
  //       .get('list');

  //   computedIds.evaluate(function(ids) {
  //     // Update the image picker with the given list of ids.
  //     app.setLoadingMode(false);
  //     app.picker.select.items().reset(ids);
  //     // Default the image picker to the first id.
  //     app.picker.select.setValue(app.picker.select.items().get(0));
  //   });
  // };

  /** Refreshes the current map layer based on the UI widget states. */
  app.refreshMapLayer = function() {
    Map.clear();
    var adminLevel = app.picker.select.getValue();
    if (adminLevel) {
      // If an image id is found, create an image.
      console.log(adminLevel);
      // var image = ee.Image(app.COLLECTION_ID + '/' + imageId);
      // Add the image to the map with the corresponding visualization options.
      Map.addLayer(app.ADMIN_LEVELS[adminLevel], {}, adminLevel);
    }
  };
};

/** Creates the app constants. */
app.createConstants = function() {
  var states = ee.FeatureCollection(senegalStates);
  var counties = ee.FeatureCollection(senegalCounties);
  var senegal = ee.FeatureCollection(senegalCountry);
  app.ADMIN_LEVELS = {
    States: states,
    Counties: counties
  };
  app.COLLECTION_ID = 'LANDSAT/LC08/C01/T1_RT_TOA';
  app.SECTION_STYLE = {margin: '20px 0 0 0'};
  app.HELPER_TEXT_STYLE = {
      margin: '8px 0 -3px 8px',
      fontSize: '12px',
      color: 'gray'
  };
  app.IMAGE_COUNT_LIMIT = 10;
  app.VIS_OPTIONS = {
    'False color (B7/B6/B4)': {
      description: 'Vegetation is shades of red, urban areas are ' +
                   'cyan blue, and soils are browns.',
      visParams: {gamma: 1.3, min: 0, max: 0.3, bands: ['B7', 'B6', 'B4']}
    },
    'Natural color (B4/B3/B2)': {
      description: 'Ground features appear in colors similar to their ' +
                   'appearance to the human visual system.',
      visParams: {gamma: 1.3, min: 0, max: 0.3, bands: ['B4', 'B3', 'B2']}
    },
    'Atmospheric (B7/B6/B5)': {
      description: 'Coast lines and shores are well-defined. ' +
                   'Vegetation appears blue.',
      visParams: {gamma: 1.3, min: 0, max: 0.3, bands: ['B7', 'B6', 'B5']}
    }
  };
};

/** Creates the application interface. */
app.boot = function() {
  app.createConstants();
  app.createHelpers();
  app.createPanels();
  var main = ui.Panel({
    widgets: [
      app.intro.panel,
      // app.filters.panel,
      app.picker.panel,
      // app.vis.panel,
      app.export.panel
    ],
    style: {width: '320px', padding: '8px'}
  });
  Map.setCenter(-14.73,14.57, 7);
  ui.root.insert(0, main);
  // app.applyFilters();
};

app.boot();
